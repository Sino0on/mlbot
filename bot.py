import asyncio
from pprint import pprint
from sys import prefix

from aiogram import Bot, Dispatcher, types
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

import asyncio
import logging
import sys

from aiogram.types import Message
from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import CommandStart, Command
from decouple import config
from django.contrib.admin import StackedInline

from states import PaymentState
from utils import get_all_packs, get_user_id, create_payment, create_link

from db import db


TOKEN = '5346235377:AAGg1mWc4FPRxGn1GFcnOBcj75MMLlrAJlA'

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher(storage=MemoryStorage())


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º CallbackData –¥–ª—è —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤
class CountryCallback(CallbackData, prefix="country"):
    name: str


class CityCallback(CallbackData, prefix="city"):
    name: str
    country: str

class InputCallback(CallbackData, prefix="input"):
    user_id: str
    price: str
    status: bool


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω
    countries = [("üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"), ("üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"), ("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")]
    buttons = [
        [types.InlineKeyboardButton(text=text, callback_data=CountryCallback(name=name).pack())]
        for text, name in countries
    ]
    data_from_db = db.get_single()
    print(data_from_db)
    buttons.append(
        [types.InlineKeyboardButton(text="‚úçÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=data_from_db['podderjka']),
        types.InlineKeyboardButton(text="‚úÖ –ö–∞–Ω–∞–ª", url=data_from_db['canal']),]
    )
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
@dp.callback_query(CountryCallback.filter())
async def process_country_callback(callback: types.CallbackQuery, callback_data: CountryCallback):

    country_name = callback_data.name
    await callback.message.delete()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    packs = get_all_packs()
    cities = [(f"üíé {good['title']}", f'{good['title']}') for good in packs]
    buttons = [
        [
            types.InlineKeyboardButton(text=text, callback_data=CityCallback(name=name, country=country_name).pack())
            for text, name in cities[i:i + 2]
        ]
        for i in range(0, len(cities), 2)
    ]
    buttons.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")
    ])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {country_name.capitalize()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–∫–æ–º–∞–Ω–¥–∞ /start)
@dp.callback_query(lambda callback: callback.data == "start")
async def process_back_to_start(callback: types.CallbackQuery):
    await callback.message.delete()
    await start_command(callback.message)

@dp.callback_query(lambda callback: callback.data == "payment")
async def process_payment_to_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(PaymentState.user_id)
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID –∞–∫–∫–∞—É–Ω—Ç–∞')


@dp.callback_query(InputCallback.filter())
async def process_payment_to_end(callback: types.CallbackQuery, callback_data: InputCallback, state: FSMContext):
    user_id = callback_data.user_id
    status = callback_data.status
    data = await state.get_data()
    if status:
        buttons = [
            [types.InlineKeyboardButton(text="‚úÖ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ ‚úÖ‚úÖ", callback_data='payment_accepted')]
        ]
    else:
        buttons = [
            [types.InlineKeyboardButton(text="üö´üö´ –û—Ç–∫–∞–∑–∞–Ω–æ üö´üö´", callback_data='payment_accepted')]
        ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_reply_markup(reply_markup=keyboard, text=callback.message.text)
    if callback.message:
        await bot.send_message(chat_id=user_id, text='good' if status else 'bad')


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query(CityCallback.filter())
async def process_city_callback(callback: types.CallbackQuery, callback_data: CityCallback, state: FSMContext):
    city_name = callback_data.name
    country_name = callback_data.country
    await state.update_data(region=callback_data.country)
    await callback.message.delete()
    buttons = [[
        types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å", callback_data="payment"),
        types.InlineKeyboardButton(text="‚úçÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/kbchmk"),
        ],
        [
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")
    ]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    # await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ {city_name.capitalize()} –≤ —Å—Ç—Ä–∞–Ω–µ {country_name.capitalize()}.", reply_markup=keyboard)
    packs = get_all_packs()
    good = [i for i in packs if i['title'] == city_name][0]
    photo_url = good['icon']

    price = good['pay_channel_sub'][0]['price_local_sell_precision']
    await state.update_data(price=price)

    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=photo_url,
        caption=f"–¢—ã –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {city_name.capitalize()} –≤ —Å—Ç—Ä–∞–Ω–µ {country_name.capitalize()}.\n–°—Ç–æ–∏–º–æ—Å—Ç—å - {price} —Ä—É–±–ª–µ–π",
        reply_markup=keyboard
    )

@dp.message(PaymentState.user_id)
async def process_like_write_bots(message: Message, state: FSMContext) -> None:
    user = get_user_id(message.text)
    if user:
        await state.update_data(username=user)
        await state.update_data(user_id=message.text)

        await state.set_state(PaymentState.check)
        data = await state.get_data()
        buttons = [[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start"),
            types.InlineKeyboardButton(text="‚úçÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/kbchmk"),
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        countres = {
            "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω": "kg",
            "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "kz",
            "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "uz",
        }
        recvisits = db.get_recvisits(region=countres[data['region']])

        await message.reply(
            f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - {user}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã\n{"\n".join([f"{a.title} - {a.number}" for a in recvisits])}\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ - {data['price']}""",
            reply_markup=keyboard,
        )
    else:
        await message.answer("ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç


@dp.message(PaymentState.check, F.photo)
async def process_image_upload(message: Message, state: FSMContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    file_id = photo.file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(photo_file_id=file_id)
    data_from_db = db.get_single()
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    await state.set_state(PaymentState)  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    buttons = [
        [types.InlineKeyboardButton(text="‚úçÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=data_from_db['podderjka']),
         types.InlineKeyboardButton(text="‚úÖ –ö–∞–Ω–∞–ª", url=data_from_db['canal']), ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply(
        "‚úÖ–°–ø–∞—Å–∏–±–æ.\n‚úÖ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã",
        reply_markup=keyboard
    )
    data = await state.get_data()
    pprint(data)
    data_from_db = db.get_single()
    response = create_payment(data['user_id'], str(data['price']), data_from_db['mail'])
    pprint(response)
    response = create_link(response['data']['order_id'])
    url = response['data']['payment_url']
    await state.update_data(url=url)
    buttons = [
        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=InputCallback(user_id=f'{message.from_user.id}', price=f"{data['price']}", status=True).pack()),
         types.InlineKeyboardButton(text="üö´ –û—Ç–∫–∞–∑", callback_data=InputCallback(user_id=f'{message.from_user.id}', price=f"{data['price']}", status=False).pack()), ]
    ]
    buttons.append([types.InlineKeyboardButton(text="üïê –û–ø–ª–∞—Ç–∏—Ç—å", url=url)])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_photo(chat_id='-1002290257071', photo=file_id, caption=f'–ù–æ–≤—ã–π –ß–µ–∫ ‚¨ÜÔ∏è‚¨ÜÔ∏è\n–û–ø–ª–∞—Ç–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {data['user_id']} - {data['username']}\n–°—É–º–º–∞ - {data['price']}\n–†–µ–≥–∏–æ–Ω - {data['region']}', reply_markup=keyboard)

@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        "Cancelled.",
        reply_markup=ReplyKeyboardRemove(),
    )


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls


    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())